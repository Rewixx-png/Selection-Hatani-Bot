# handlers/admin.py
import logging
import re

from aiogram import types, Router, Bot, F
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.utils.markdown import html_decoration as hd

import config
import db
import keyboards
import utils
from handlers.moderation import unmute_user_func

router = Router()
admin_chat_filter = F.message.chat.id == config.CHAT_ID
router.callback_query.filter(admin_chat_filter)


@router.callback_query(F.data.startswith("admin:approve:"), F.from_user.id.in_(config.ADMIN_IDS))
async def approve_application_callback(call: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."""
    admin_id = call.from_user.id
    chat_id = call.message.chat.id
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∞ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ –µ—Å—Ç—å, –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞)
    media_message = call.message.reply_to_message
    
    try:
        applicant_id = int(call.data.split(":")[-1])
    except (IndexError, ValueError):
        await call.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–Ω–æ–ø–∫–µ.", show_alert=True)
        return

    log_prefix = f"Approve/{applicant_id}"
    logging.info(f"[{log_prefix}] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –æ–¥–æ–±—Ä–∏–ª –∑–∞—è–≤–∫—É.")
    
    # –ò—â–µ–º caption –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
    caption = ""
    if media_message and media_message.media_group_id:
        # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞, –∏—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å caption
        # –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–∏–¥–µ–æ)
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—â–µ–º caption –≤ —Å–∞–º–æ–º reply_to_message, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
        if media_message.caption:
            caption = media_message.caption
    
    tiktok_link_match = re.search(r"üîó TikTok: <a href=\"(.*?)\">", caption)
    tiktok_link_from_caption = tiktok_link_match.group(1) if tiktok_link_match else "–ù–µ –Ω–∞–π–¥–µ–Ω–∞"
    program_from_caption = "–ù–µ —É–∫–∞–∑–∞–Ω–∞" # –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è

    # –£–¥–∞–ª—è–µ–º –∏ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω–∞ –æ—Ç–≤–µ—á–∞–ª–∞ (–ø–µ—Ä–≤–æ–µ –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ)
    await utils.safe_delete_message(bot, chat_id, call.message.message_id, log_prefix=log_prefix)
    if media_message:
       await utils.safe_delete_message(bot, chat_id, media_message.message_id, log_prefix=log_prefix)

    try:
        applicant_info = await bot.get_chat(applicant_id)
        applicant_link = utils.format_user_link(applicant_info)
        admin_info = await bot.get_chat(admin_id)
        admin_link = utils.format_user_link(admin_info)
    except Exception:
        applicant_link = f"ID: {applicant_id}"
        admin_link = f"ID: {admin_id}"

    approved_text_chat = (
        f"‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {applicant_link} {hd.bold('–æ–¥–æ–±—Ä–µ–Ω–∞')}!\n"
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_link}\n\n"
        f"üîó –ö–∞–Ω–¥–∏–¥–∞—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å {hd.link('–≤–ª–∞–¥–µ–ª—å—Ü–µ–º', config.CREATOR_PROFILE_URL)} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏."
    )
    approved_text_pm = (
         f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ HataniSquad {hd.bold('–æ–¥–æ–±—Ä–µ–Ω–∞')}!\n\n"
         f"–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é –±–µ—Å–µ–¥—É, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å {hd.link('–≤–ª–∞–¥–µ–ª—å—Ü–µ–º', config.CREATOR_PROFILE_URL)}."
    )

    await bot.send_message(chat_id, approved_text_chat, disable_web_page_preview=True)
    try:
        await bot.send_message(applicant_id, approved_text_pm, disable_web_page_preview=True)
    except (TelegramBadRequest, TelegramForbiddenError) as e_pm:
        logging.warning(f"[{log_prefix}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏: {e_pm}")

    await db.record_passed_user(applicant_id, tiktok_link_from_caption, program_from_caption)
    await call.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.")


@router.callback_query(F.data.startswith("admin:reject:"), F.from_user.id.in_(config.ADMIN_IDS))
async def reject_application_callback(call: types.CallbackQuery, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è."""
    try:
        applicant_id = int(call.data.split(":")[-1])
    except (IndexError, ValueError):
        await call.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID.", show_alert=True)
        return

    try:
        original_text = call.message.text or ""
    except AttributeError:
        await call.answer("‚ö†Ô∏è –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ, –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.", show_alert=True)
        return

    new_text = f"{original_text}\n\n---\nüìù {hd.bold('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:')}"
    keyboard = keyboards.get_rejection_reason_keyboard(applicant_id)

    # <<< –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º safe_edit_message_text, —Ç.–∫. —É —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç caption >>>
    await utils.safe_edit_message_text(
        bot=bot, text=new_text, chat_id=call.message.chat.id, message_id=call.message.message_id,
        reply_markup=keyboard, log_prefix=f"RejectInit/{applicant_id}"
    )
    await call.answer("üìù –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.")


@router.callback_query(F.data.startswith("admin:reject_reason:"), F.from_user.id.in_(config.ADMIN_IDS))
async def handle_rejection_reason(call: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è."""
    try:
        _, _, applicant_id_str, reason_code = call.data.split(":")
        applicant_id = int(applicant_id_str)
        rejection_reason = config.REJECTION_REASONS.get(reason_code)
        if not rejection_reason: raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏—á–∏–Ω—ã")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data –≤ handle_rejection_reason: {call.data} ({e})")
        await call.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        return

    log_prefix = f"RejectConfirm/{applicant_id}"
    logging.info(f"[{log_prefix}] –ê–¥–º–∏–Ω {call.from_user.id} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É. –ü—Ä–∏—á–∏–Ω–∞: {rejection_reason}")
    
    media_message = call.message.reply_to_message
    caption = ""
    # –ò—â–µ–º caption –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
    if media_message and media_message.media_group_id:
        if media_message.caption:
            caption = media_message.caption
    
    tiktok_link_match = re.search(r"üîó TikTok: <a href=\"(.*?)\">", caption)
    tiktok_link_from_caption = tiktok_link_match.group(1) if tiktok_link_match else "–ù–µ –Ω–∞–π–¥–µ–Ω–∞"
    applicant_name_match = re.search(r"üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: <a href=.*?>(.*?)</a>", caption)
    applicant_name_from_caption = hd.quote(applicant_name_match.group(1)) if applicant_name_match else f"ID:{applicant_id}"
    program_from_caption = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

    rejection_pm_text = f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ HataniSquad –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {hd.quote(rejection_reason)}"
    try:
        await bot.send_message(applicant_id, rejection_pm_text)
    except (TelegramBadRequest, TelegramForbiddenError) as e:
        logging.warning(f"[{log_prefix}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")

    # –£–¥–∞–ª—è–µ–º –ø–∞–Ω–µ–ª—å –∏ –º–µ–¥–∏–∞
    await utils.safe_delete_message(bot, call.message.chat.id, call.message.message_id, log_prefix=log_prefix)
    if media_message:
        await utils.safe_delete_message(bot, call.message.chat.id, media_message.message_id, log_prefix=log_prefix)

    await utils.kick_and_notify(
        bot=bot, user_id=applicant_id, chat_id=config.CHAT_ID,
        first_name=applicant_name_from_caption,
        reason=f"–∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º ({rejection_reason})",
        subscribers=None
    )
    await db.record_failed_user(applicant_id, tiktok_link_from_caption, program_from_caption, rejection_reason)
    await call.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")


@router.callback_query(F.data.startswith("admin:unmute:"), F.from_user.id.in_(config.ADMIN_IDS))
async def unmute_user_admin_callback(call: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–∞–∑–º—É—Ç–∏—Ç—å' –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    try:
        user_id_to_unmute = int(call.data.split(":")[-1])
    except (IndexError, ValueError):
        await call.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return

    success = await unmute_user_func(
        bot=bot, user_id=user_id_to_unmute, chat_id=call.message.chat.id,
        triggered_by_admin=True, admin_id=call.from_user.id
    )

    if success:
        admin_info = await bot.get_chat(call.from_user.id)
        user_info = await bot.get_chat(user_id_to_unmute)
        final_text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {utils.format_user_link(user_info)} —Ä–∞–∑–º—É—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {utils.format_user_link(admin_info)}."
        try:
            await call.message.edit_text(final_text, reply_markup=None)
        except TelegramBadRequest as e:
             if "message is not modified" not in str(e):
                 logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–∞–∑–º—É—Ç–∞: {e}")
        await call.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—É—á–µ–Ω.")
    else:
        try:
            await call.message.edit_text(call.message.text + "\n(–î–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ)", reply_markup=None)
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                 logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ—É–¥–∞–≤—à–µ–º—Å—è —Ä–∞–∑–º—É—Ç–µ: {e}")
        await call.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º—É—Ç–∏—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —Ä–∞–∑–º—É—á–µ–Ω).", show_alert=True)


@router.callback_query(F.data.startswith("admin:unban:"))
async def unban_user_admin_callback(call: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–Ω—è—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É' –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    member = await bot.get_chat_member(chat_id=call.message.chat.id, user_id=call.from_user.id)
    if not isinstance(member, (types.ChatMemberOwner, types.ChatMemberAdministrator)):
        await call.answer("‚ö†Ô∏è –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.", show_alert=True)
        return

    try:
        user_id_to_unban = int(call.data.split(":")[-1])
    except (IndexError, ValueError):
        await call.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return

    log_prefix = f"Unban/{user_id_to_unban}"
    try:
        await bot.unban_chat_member(chat_id=call.message.chat.id, user_id=user_id_to_unban, only_if_banned=True)
        logging.info(f"[{log_prefix}] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {call.from_user.id} —Å–Ω—è–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        
        await db.delete_user_selection_status(user_id_to_unban)
        await db.delete_failed_user(user_id_to_unban)
        logging.info(f"[{log_prefix}] –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø–∏—Å—å –æ 'failed' —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î.")
        
        pm_unban_text = "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–Ω—è–ª —Å –≤–∞—Å –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤ —á–∞—Ç–µ –æ—Ç–±–æ—Ä–∞ HataniSquad. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–æ–π—Ç–∏ –æ—Ç–±–æ—Ä."
        try:
            await bot.send_message(user_id_to_unban, pm_unban_text)
            logging.info(f"[{log_prefix}] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–Ω—è—Ç–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –õ–°.")
        except (TelegramForbiddenError, TelegramBadRequest):
            logging.warning(f"[{log_prefix}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –æ —Å–Ω—è—Ç–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω).")
        
        admin_info = call.from_user
        try:
            user_info = await bot.get_chat(user_id_to_unban)
        except Exception:
            user_info = types.User(id=user_id_to_unban, is_bot=False, first_name=f"ID:{user_id_to_unban}")

        final_text = (
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {utils.format_user_link(user_info)} –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω "
            f"–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {utils.format_user_link(admin_info)}."
        )
        await call.message.edit_text(final_text, reply_markup=None)
        await call.answer("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞.")

    except Exception as e:
        logging.error(f"[{log_prefix}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        await call.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞–∑–±–∞–Ω–µ–Ω.", show_alert=True)