import logging
import random

from aiogram import types, Router, Bot, F
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.utils.markdown import html_decoration as hd

import config
import db
import keyboards
import utils
from states import SelectionStates

router = Router()
router.message.filter(F.chat.id == config.CHAT_ID)
router.callback_query.filter(F.message.chat.id == config.CHAT_ID)

@router.message(F.new_chat_members)
async def greet_new_member(message: types.Message, bot: Bot):
    for user in message.new_chat_members:
        if user.id == bot.id:
            try:
                if message.chat.id != config.CHAT_ID:
                    await bot.leave_chat(message.chat.id)
                    logging.info(f"–ë–æ—Ç –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç {message.chat.id} ({message.chat.title}).")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —á–∞—Ç–∞ {message.chat.id}: {e}")
            return

        user_name = hd.quote(user.first_name)
        user_id = user.id
        log_prefix = f"NewMember/{user_id}"
        logging.info(f"[{log_prefix}] –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ {user_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É.")

        status_data = await db.get_user_selection_data(user_id)
        status = status_data['status'] if status_data else None

        if status in ['passed', 'failed', 'inactive_kick']:
            logging.warning(f"[{log_prefix}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'.")
            perms = types.ChatPermissions(can_send_messages=True, can_send_media_messages=True, can_add_web_page_previews=True, can_send_other_messages=True)
            await utils.safe_restrict_chat_member(bot, config.CHAT_ID, user_id, perms, log_prefix=f"RejoinUnrestrict/{user_id}")
            continue

        perms = types.ChatPermissions(can_send_messages=False, can_send_media_messages=False, can_send_other_messages=False, can_add_web_page_previews=False)
        restricted = await utils.safe_restrict_chat_member(bot, config.CHAT_ID, user_id, perms, log_prefix=f"NewMemberRestrict/{user_id}")

        if restricted:
            keyboard = keyboards.get_unmute_start_keyboard(user_id)
            welcome_text = (
                f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {user_name}!\n\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ {hd.bold('–æ—Ç–±–æ—Ä')} –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ {hd.bold('HataniSquad')}.\n\n"
                f"‚ùóÔ∏è{hd.bold('–í–∞–∂–Ω—ã–π —à–∞–≥:')} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É {hd.bold('¬´ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–°¬ª')} –Ω–∏–∂–µ, "
                f"—á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–∂–∞—Ç—å —Ç–∞–º {hd.code('/start')}.\n\n"
                f"‚úÖ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É {hd.bold('¬´‚úÖ –Ø —É–∂–µ –Ω–∞–ø–∏—Å–∞–ª /start¬ª')}."
            )
            try:
                welcome_message = await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")
                await db.set_user_selection_status(user_id, 'pending')
                await utils.schedule_kick(
                    bot=bot, user_id=user_id, chat_id=config.CHAT_ID,
                    delay=config.SELECTION_INACTIVE_KICK_DELAY,
                    reason="–Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ –≤ –õ–° –∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª",
                    user_first_name=user.first_name,
                    initial_message=welcome_message
                )
                logging.info(f"[{log_prefix}] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∫–∏–∫.")
            except Exception as e:
                logging.exception(f"[{log_prefix}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è/–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∏–∫–∞ –¥–ª—è {user_id}: {e}")
        else:
            logging.error(f"[{log_prefix}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

@router.callback_query(F.data.startswith("selection:start_verification:"))
async def start_verification_callback(call: types.CallbackQuery, state: FSMContext):
    user_id = int(call.data.split(":")[-1])
    callback_user_id = call.from_user.id
    log_prefix = f"StartVerification/{user_id}"

    if callback_user_id != user_id:
        await call.answer("‚ö†Ô∏è –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.", show_alert=True)
        return

    if not await db.check_user_started_pm(user_id):
        await call.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –õ–° –∫ –±–æ—Ç—É –∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start —Ç–∞–º!", show_alert=True)
        logging.info(f"[{log_prefix}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –Ω–æ –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –≤ –õ–°.")
        return

    utils.cancel_kick_task(user_id)
    logging.info(f"[{log_prefix}] –ó–∞–¥–∞—á–∞ –Ω–∞ –∫–∏–∫ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    agreement_text = "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ:"
    keyboard = keyboards.get_agreement_keyboard(user_id)
    try:
        await call.message.edit_text(agreement_text, reply_markup=keyboard)
        await state.set_state(SelectionStates.waiting_for_agreement)
        await db.set_user_selection_status(user_id, 'started')
        logging.info(f"[{log_prefix}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ, state: waiting_for_agreement.")
        await call.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await call.answer()
        else:
            logging.exception(f"[{log_prefix}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è: {e}")
            await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)
    except Exception as e:
        logging.exception(f"[{log_prefix}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("selection:confirm_agreement:"), SelectionStates.waiting_for_agreement)
async def confirm_agreement_callback(call: types.CallbackQuery, state: FSMContext):
    user_id = int(call.data.split(":")[-1])

    if call.from_user.id != user_id:
        await call.answer("‚ö†Ô∏è –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∞—Å.", show_alert=True)
        return

    rules_text = "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ HataniSquad:"
    keyboard = keyboards.get_rules_keyboard(user_id)
    try:
        await call.message.edit_text(rules_text, reply_markup=keyboard)
        await state.set_state(SelectionStates.waiting_for_rules)
        logging.info(f"[ConfirmAgreement/{user_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞.")
        await call.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await call.answer()
        else:
            logging.exception(f"[ConfirmAgreement/{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–∞–≤–∏–ª: {e}")
            await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)
    except Exception as e:
        logging.exception(f"[ConfirmAgreement/{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–∞–≤–∏–ª: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("selection:confirm_rules:"), SelectionStates.waiting_for_rules)
async def confirm_rules_callback(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    user_id = int(call.data.split(":")[-1])
    log_prefix = f"ConfirmRules/{user_id}"

    if call.from_user.id != user_id:
        await call.answer("‚ö†Ô∏è –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∞—Å.", show_alert=True)
        return

    perms = types.ChatPermissions(
        can_send_messages=True, can_send_media_messages=True,
        can_send_other_messages=True, can_add_web_page_previews=True
    )
    unrestricted = await utils.safe_restrict_chat_member(bot, config.CHAT_ID, user_id, perms, log_prefix=log_prefix)

    if unrestricted:
        response_start = random.choice(config.POSITIVE_RESPONSES)
        menu_text = (
            f"{response_start} –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—Ä–∞–≤–∏–ª–∞ –∏ –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ.\n\n"
            f"‚ÑπÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {hd.bold('–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')}.\n"
            f"üëâ –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ—Ç–±–æ—Ä, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É."
        )
        keyboard = await keyboards.get_main_menu_keyboard(user_id)
        try:
            await call.message.edit_text(menu_text, reply_markup=keyboard)
            await state.clear()
            logging.info(f"[{log_prefix}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–∞–≤–∏–ª–∞, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. FSM —Å–±—Ä–æ—à–µ–Ω.")
            await call.answer("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç–µ!")
        except Exception as e:
            logging.exception(f"[{log_prefix}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
            await state.clear()
    else:
        logging.error(f"[{log_prefix}] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª.")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
        await state.clear()