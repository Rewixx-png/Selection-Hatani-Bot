import logging
import re
import random
from io import BytesIO
from playwright.async_api import async_playwright
import redis.asyncio as redis

from aiogram import Router, F, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile, InputMediaPhoto, InputMediaVideo
from aiogram.utils.markdown import html_decoration as hd

import config
import db
import keyboards
import utils
from states import SelectionStates

router = Router()
router.message.filter(F.chat.id == config.CHAT_ID)
router.callback_query.filter(F.message.chat.id == config.CHAT_ID)

async def get_screenshot_playwright(url: str) -> bytes | None:
    browser = None
    try:
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=True)
            context = await browser.new_context(
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36",
                viewport={'width': 1280, 'height': 800}
            )
            
            if config.ANTI_BOT_TOKEN:
                await context.add_cookies([{'name': 'datadome', 'value': config.ANTI_BOT_TOKEN, 'domain': '.tiktok.com', 'path': '/'}])
                logging.info("Cookie –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã (datadome) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            
            await context.add_init_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            page = await context.new_page()
            
            await page.goto(url, wait_until="domcontentloaded", timeout=45000)

            cookie_banner_selector = '[data-e2e="cookie-banner-accept-button"]'
            try:
                await page.locator(cookie_banner_selector).click(timeout=3000)
                logging.info("–ë–∞–Ω–Ω–µ—Ä —Å cookie –Ω–∞–π–¥–µ–Ω –∏ –Ω–∞–∂–∞—Ç.")
            except Exception:
                logging.info("–ë–∞–Ω–Ω–µ—Ä —Å cookie –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.")

            video_grid_selector = '[data-e2e="user-post-item-list"]'
            await page.wait_for_selector(video_grid_selector, timeout=20000)
            
            await page.wait_for_timeout(1000)
            
            screenshot_bytes = await page.screenshot()
            
            logging.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è URL {url} —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–Ω —á–µ—Ä–µ–∑ Playwright.")
            return screenshot_bytes
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ Playwright –¥–ª—è URL {url}: {e}")
        return None
    finally:
        if browser:
            await browser.close()

@router.callback_query(F.data == "selection:start")
async def start_selection(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    log_prefix = f"SelectionStart/{user_id}"

    status = await db.get_user_selection_status(user_id)
    if status in ['passed', 'failed']:
        await call.answer(config.MSG_ALREADY_COMPLETED_SELECTION, show_alert=True)
        return
    current_fsm_state = await state.get_state()
    if status == 'started' and current_fsm_state is not None:
        await call.answer(config.MSG_ALREADY_STARTED_SELECTION, show_alert=True)
        return

    logging.info(f"[{log_prefix}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –æ—Ç–±–æ—Ä.")
    await state.set_state(SelectionStates.waiting_for_tiktok_link)
    
    await call.message.edit_text(
        "‚û°Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à TikTok –ø—Ä–æ—Ñ–∏–ª—å.",
        reply_markup=None
    )
    await state.update_data(prompt_message_id=call.message.message_id)
    await call.answer()

@router.message(SelectionStates.waiting_for_tiktok_link, F.text)
async def process_tiktok_link(message: types.Message, state: FSMContext, bot: Bot, redis: redis.Redis):
    user_id = message.from_user.id
    log_prefix = f"TikTokLink/{user_id}"

    if "tiktok.com" not in message.text or not message.text.startswith("https://"):
        await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ TikTok –ø—Ä–æ—Ñ–∏–ª—å (–Ω–∞—á–∏–Ω–∞—è —Å https://).")
        return

    data = await state.get_data()
    prompt_id = data.get("prompt_message_id")
    if prompt_id:
        await utils.safe_delete_message(bot, message.chat.id, prompt_id)

    tiktok_link = message.text
    await message.delete() 
    
    wait_msg = await bot.send_message(
        message.chat.id, 
        "‚è≥ **–ü—Ä–æ–≤–µ—Ä—è—é —Å—Å—ã–ª–∫—É...**\n–ó–∞–ø—É—Å–∫–∞—é –±—Ä–∞—É–∑–µ—Ä –∏ –æ—Ç–∫—Ä—ã–≤–∞—é –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 45 —Å–µ–∫—É–Ω–¥.",
        parse_mode="Markdown"
    )
    screenshot_bytes = await get_screenshot_playwright(tiktok_link)
    await wait_msg.delete()

    if not screenshot_bytes:
        await bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞, –∏–ª–∏ TikTok –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥–æ—Å—Ç—É–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –µ—â–µ —Ä–∞–∑.")
        prompt_message = await bot.send_message(message.chat.id, "‚û°Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à TikTok –ø—Ä–æ—Ñ–∏–ª—å.")
        await state.update_data(prompt_message_id=prompt_message.message_id)
        return

    redis_key = f"screenshot:{user_id}"
    await redis.set(redis_key, screenshot_bytes, ex=900)
    
    await state.update_data(
        tiktok_link=tiktok_link,
        screenshot_redis_key=redis_key 
    )

    photo_file = BufferedInputFile(screenshot_bytes, filename="profile.jpg")
    keyboard = keyboards.get_profile_confirmation_keyboard()
    sent_photo = await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo_file,
        caption="–≠—Ç–æ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å?",
        reply_markup=keyboard
    )
    
    await state.update_data(screenshot_message_id=sent_photo.message_id)
    await state.set_state(SelectionStates.waiting_for_profile_confirmation)

@router.callback_query(SelectionStates.waiting_for_profile_confirmation, F.data == "selection:confirm_profile_no")
async def process_profile_confirmation_no(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    prompt_message = await call.message.answer("–ü–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à TikTok –ø—Ä–æ—Ñ–∏–ª—å.")
    await state.set_state(SelectionStates.waiting_for_tiktok_link)
    await state.update_data(prompt_message_id=prompt_message.message_id)
    await call.answer()

@router.callback_query(SelectionStates.waiting_for_profile_confirmation, F.data == "selection:confirm_profile_yes")
async def process_profile_confirmation_yes(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    wait_msg = await call.message.answer("‚è≥ –°–æ—Ö—Ä–∞–Ω—è—é –≤–∞—à –≤—ã–±–æ—Ä...")
    
    data = await state.get_data()
    screenshot_message_id = data.get("screenshot_message_id")
    if screenshot_message_id:
        await utils.safe_delete_message(call.bot, call.message.chat.id, screenshot_message_id)
    
    await wait_msg.delete()
    
    prompt_msg = await call.message.answer(
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –ª—É—á—à–∏–π —ç–¥–∏—Ç –≤ –≤–∏–¥–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞.\n"
        f"‚ùóÔ∏è–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É: {config.MAX_EDIT_FILE_SIZE_MB} –ú–ë."
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)
    await state.set_state(SelectionStates.waiting_for_edit_video)

@router.message(SelectionStates.waiting_for_edit_video, F.video)
async def process_edit_video(message: types.Message, state: FSMContext, bot: Bot, redis: redis.Redis):
    user_id = message.from_user.id
    log_prefix = f"EditVideo/{user_id}"

    if message.video.file_size > config.MAX_EDIT_FILE_SIZE_BYTES:
        await message.reply(f"‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - {config.MAX_EDIT_FILE_SIZE_MB} –ú–ë.")
        return

    user_data = await state.get_data()
    prompt_id = user_data.get("prompt_message_id")
    if prompt_id:
        await utils.safe_delete_message(bot, message.chat.id, prompt_id)

    wait_msg = await message.answer("‚úÖ –í–∏–¥–µ–æ –ø—Ä–∏–Ω—è—Ç–æ! –§–æ—Ä–º–∏—Ä—É—é –∑–∞—è–≤–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...")
    await message.delete()

    logging.info(f"[{log_prefix}] –ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è –æ—Ç–±–æ—Ä–∞ (file_id: {message.video.file_id})")
    
    tiktok_link = user_data.get('tiktok_link', '–ù–µ —É–∫–∞–∑–∞–Ω')
    screenshot_redis_key = user_data.get('screenshot_redis_key')
    screenshot_bytes = None
    if screenshot_redis_key:
        screenshot_bytes = await redis.get(screenshot_redis_key)
        await redis.delete(screenshot_redis_key)
        logging.info(f"[{log_prefix}] –°–∫—Ä–∏–Ω—à–æ—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ Redis –ø–æ –∫–ª—é—á—É {screenshot_redis_key}")
    
    edit_video_file_id = message.video.file_id
    await state.clear()

    applicant_link = utils.format_user_link(message.from_user)
    tiktok_username_match = re.search(r'@([\w.-]+)', tiktok_link)
    tiktok_username = tiktok_username_match.group(0) if tiktok_username_match else "–ü—Ä–æ—Ñ–∏–ª—å"
    
    try:
        media_group = []
        video_caption = (
            f"üî• {hd.bold('–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–±–æ—Ä!')} üî•\n\n"
            f"üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: {applicant_link} ({hd.code(str(user_id))})\n"
            f"üîó TikTok: {hd.link(tiktok_username, tiktok_link)}"
        )
        
        if screenshot_bytes:
            photo_input = BufferedInputFile(screenshot_bytes, filename="profile.jpg")
            media_group.append(InputMediaPhoto(media=photo_input))
        
        media_group.append(InputMediaVideo(media=edit_video_file_id, caption=video_caption))

        sent_media_messages = await bot.send_media_group(
            chat_id=config.CHAT_ID,
            media=media_group
        )
        
        control_panel_text = "üëá –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã, –æ—Ü–µ–Ω–∏—Ç–µ —ç–¥–∏—Ç –∏ –≤—ã–Ω–µ—Å–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ."
        keyboard = keyboards.get_approve_reject_keyboard(
            applicant_id=user_id,
            tiktok_link=tiktok_link,
            tiktok_username=tiktok_username
        )
        
        control_panel_message = await bot.send_message(
            chat_id=config.CHAT_ID,
            text=control_panel_text,
            reply_to_message_id=sent_media_messages[0].message_id,
            reply_markup=keyboard,
            disable_web_page_preview=True
        )

        await bot.pin_chat_message(config.CHAT_ID, control_panel_message.message_id)
        
        await wait_msg.delete()
        
        logging.info(f"[{log_prefix}] –ó–∞—è–≤–∫–∞ (–º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ + –ø–∞–Ω–µ–ª—å) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é (msg_id: {control_panel_message.message_id}).")
        await bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ! –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

    except Exception as e:
        await wait_msg.delete()
        logging.exception(f"[{log_prefix}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}")
        await bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await db.set_user_selection_status(user_id, 'error_send')