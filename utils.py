# utils.py
import logging
import asyncio
import time
import re
from typing import Optional, Dict, Tuple, List, Union

from aiogram import Bot, types
from aiogram.utils.markdown import html_decoration as hd
from aiogram.exceptions import (
    TelegramAPIError,
    TelegramBadRequest,
    TelegramNotFound,
    TelegramForbiddenError
)

import config
import db

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ---
def format_user_link(user: Union[types.User, types.Chat]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è HTML."""
    name_to_show = user.first_name or user.title or f"ID:{user.id}"
    name = hd.quote(str(name_to_show))
    return hd.link(name, f"tg://user?id={user.id}")

def format_username(user: Union[types.User, types.Chat]) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç @username –∏–ª–∏ –∏–º—è/–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è HTML."""
    if user.username:
        return f"@{user.username}"
    else:
        name_to_show = user.first_name or user.title or f"ID:{user.id}"
        return hd.quote(str(name_to_show))

# --- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å API ---

async def safe_delete_message(bot: Bot, chat_id: int, message_id: int, log_prefix: str = ""):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ª–æ–≥–∏—Ä—É—è –æ—à–∏–±–∫–∏."""
    prefix = f"[{log_prefix}] " if log_prefix else ""
    try:
        await bot.delete_message(chat_id, message_id)
        logging.info(f"{prefix}–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id} —É–¥–∞–ª–µ–Ω–æ.")
    except TelegramNotFound:
        logging.warning(f"{prefix}–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    except TelegramAPIError as e:
        logging.error(f"{prefix}–û—à–∏–±–∫–∞ API –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
    except Exception as e:
        logging.exception(f"{prefix}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")

async def safe_edit_message_text(bot: Bot, text: str, chat_id: int, message_id: int,
                                 reply_markup=None, parse_mode='HTML', log_prefix: str = "") -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è."""
    prefix = f"[{log_prefix}] " if log_prefix else ""
    try:
        # <<< –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ >>>
        await bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
        logging.info(f"{prefix}–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ.")
        return True
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            logging.warning(f"{prefix}–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id} –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")
        else:
            logging.error(f"{prefix}–û—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return False
    except TelegramNotFound:
        logging.warning(f"{prefix}–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return False
    except Exception as e:
        logging.exception(f"{prefix}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return False

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ–∞–π–ª–∞ utils.py –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

async def safe_edit_message_caption(bot: Bot, caption: str, chat_id: int, message_id: int,
                                    reply_markup=None, parse_mode='HTML', log_prefix: str = "") -> bool:
    prefix = f"[{log_prefix}] " if log_prefix else ""
    try:
        await bot.edit_message_caption(chat_id=chat_id, message_id=message_id, caption=caption, reply_markup=reply_markup, parse_mode=parse_mode)
        logging.info(f"{prefix}–ü–æ–¥–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞.")
        return True
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            logging.warning(f"{prefix}–ü–æ–¥–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id} –Ω–µ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞.")
        else:
            logging.error(f"{prefix}–û—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∏ {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return False
    except TelegramNotFound:
        logging.warning(f"{prefix}–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏.")
        return False
    except TelegramAPIError as e:
        logging.error(f"{prefix}–û—à–∏–±–∫–∞ API –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return False
    except Exception as e:
        logging.exception(f"{prefix}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return False

async def safe_restrict_chat_member(bot: Bot, chat_id: int, user_id: int, permissions: types.ChatPermissions, until_date: Optional[int] = None, log_prefix: str = "") -> bool:
    prefix = f"[{log_prefix}] " if log_prefix else ""
    action = "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ" if until_date else "–°–Ω—è—Ç–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
    try:
        await bot.restrict_chat_member(chat_id, user_id, permissions, until_date=until_date)
        logging.info(f"{prefix}{action} –ø—Ä–∞–≤ –¥–ª—è user_id {user_id} –≤ chat_id {chat_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
        return True
    except TelegramBadRequest as e:
         error_text = str(e).lower()
         if "user is an administrator of the chat" in error_text or "can't restrict self" in error_text:
             logging.warning(f"{prefix}–ù–µ —É–¥–∞–ª–æ—Å—å {action.lower()} –ø—Ä–∞–≤–∞ user_id {user_id} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω/–±–æ—Ç —Å–∞–º).")
         elif "not enough rights" in error_text or "can't remove chat owner" in error_text:
              logging.warning(f"{prefix}–ù–µ —É–¥–∞–ª–æ—Å—å {action.lower()} –ø—Ä–∞–≤–∞ user_id {user_id} (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É –±–æ—Ç–∞).")
         else:
             logging.error(f"{prefix}–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ {action.lower()} –ø—Ä–∞–≤ user_id {user_id}: {e}")
         return False
    except TelegramAPIError as e:
        logging.error(f"{prefix}–û—à–∏–±–∫–∞ API –ø—Ä–∏ {action.lower()} –ø—Ä–∞–≤ user_id {user_id}: {e}")
        return False
    except Exception as e:
        logging.exception(f"{prefix}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ {action.lower()} –ø—Ä–∞–≤ user_id {user_id}: {e}")
        return False

async def safe_kick_chat_member(bot: Bot, chat_id: int, user_id: int, log_prefix: str = "") -> bool:
    prefix = f"[{log_prefix}] " if log_prefix else ""
    try:
        await bot.ban_chat_member(chat_id, user_id)
        logging.info(f"[{log_prefix}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω (–∫–∏–∫–Ω—É—Ç) –∏–∑ —á–∞—Ç–∞ {chat_id}.")
        await bot.unban_chat_member(chat_id, user_id, only_if_banned=True)
        return True
    except TelegramBadRequest as e:
         error_text = str(e).lower()
         if "user is an administrator of the chat" in error_text:
             logging.warning(f"{prefix}–ù–µ —É–¥–∞–ª–æ—Å—å –∫–∏–∫–Ω—É—Ç—å user_id {user_id} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä).")
         elif "not enough rights" in error_text or "can't remove chat owner" in error_text:
              logging.warning(f"{prefix}–ù–µ —É–¥–∞–ª–æ—Å—å –∫–∏–∫–Ω—É—Ç—å user_id {user_id} (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É –±–æ—Ç–∞).")
         else:
             logging.error(f"{prefix}–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ –∫–∏–∫–µ user_id {user_id}: {e}")
         return False
    except TelegramAPIError as e:
        logging.error(f"{prefix}–û—à–∏–±–∫–∞ API –ø—Ä–∏ –∫–∏–∫–µ user_id {user_id}: {e}")
        return False
    except Exception as e:
        logging.exception(f"{prefix}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ user_id {user_id}: {e}")
        return False

unmute_tasks: Dict[Tuple[int, int], asyncio.Task] = {}
kick_tasks: Dict[int, asyncio.Task] = {}

async def kick_and_notify(bot: Bot, user_id: int, chat_id: int, first_name: str, reason: str, subscribers: Optional[str] = None) -> bool:
    log_prefix = f"KickNotify/{user_id}"
    logging.info(f"[{log_prefix}] –ü–æ–ø—ã—Ç–∫–∞ –∫–∏–∫–∞. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
    kicked = await safe_kick_chat_member(bot, chat_id, user_id, log_prefix=log_prefix)
    if kicked:
        temp_user = types.User(id=user_id, first_name=first_name, is_bot=False)
        user_link_str = format_user_link(temp_user)
        kick_message_text = (
            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_link_str} "
            f"(ID: {hd.code(str(user_id))}) –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞ –æ—Ç–±–æ—Ä–∞."
        )
        try:
            kick_msg = await bot.send_message(chat_id, kick_message_text, parse_mode="HTML")
            asyncio.create_task(delete_message_after(bot, chat_id, kick_msg.message_id, 60))
            return True
        except Exception as e:
            logging.error(f"[{log_prefix}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∏–∫–µ –≤ —á–∞—Ç: {e}")
            return True
    else:
        logging.warning(f"[{log_prefix}] –ö–∏–∫ –Ω–µ —É–¥–∞–ª—Å—è.")
        return False

async def schedule_unmute(bot: Bot, user_id: int, chat_id: int, unmute_timestamp: int):
    from handlers.moderation import unmute_user_func
    now = int(time.time())
    delay = unmute_timestamp - now
    if delay <= 0:
        try:
            success = await unmute_user_func(bot, user_id, chat_id, triggered_by_schedule=True)
        except Exception as e_unmute:
             logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–º —Ä–∞–∑–º—É—Ç–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é {user_id}: {e_unmute}")
             await db.remove_mute(user_id, chat_id)
        return
    task_key = (user_id, chat_id)
    if task_key in unmute_tasks and not unmute_tasks[task_key].done():
        unmute_tasks[task_key].cancel()
    async def unmute_coro():
        try:
            await asyncio.sleep(delay)
            await unmute_user_func(bot, user_id, chat_id, triggered_by_schedule=True)
        except asyncio.CancelledError:
            logging.info(f"–ó–∞–¥–∞—á–∞ –Ω–∞ —Ä–∞–∑–º—É—Ç –¥–ª—è {task_key} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –≤ –∫–æ—Ä—É—Ç–∏–Ω–µ —Ä–∞–∑–º—É—Ç–∞ –¥–ª—è {task_key}: {e}")
        finally:
            if task_key in unmute_tasks: del unmute_tasks[task_key]
    task = asyncio.create_task(unmute_coro())
    unmute_tasks[task_key] = task
    logging.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Ä–∞–∑–º—É—Ç –¥–ª—è {task_key} —á–µ—Ä–µ–∑ {delay:.2f} —Å–µ–∫—É–Ω–¥.")

def cancel_unmute_task(user_id: int, chat_id: int):
    task_key = (user_id, chat_id)
    if task_key in unmute_tasks and not unmute_tasks[task_key].done():
        unmute_tasks[task_key].cancel()
        return True
    return False

async def schedule_kick(bot: Bot, user_id: int, chat_id: int, delay: int, reason: str, user_first_name: str, initial_message: Optional[types.Message] = None):
    if user_id in kick_tasks and not kick_tasks[user_id].done():
        kick_tasks[user_id].cancel()
    async def kick_coro():
        try:
            await asyncio.sleep(delay)
            user_data = await db.get_user_selection_data(user_id)
            status = user_data['status'] if user_data else None
            started_pm = user_data['started_pm'] == 1 if user_data else False
            if status == 'pending' and not started_pm:
                kick_reason_pm = "–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º –≤ –õ–°"
                try:
                    await bot.send_message(user_id, f"–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —á–∞—Ç–∞ –æ—Ç–±–æ—Ä–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å—Ç–∞—Ä—Ç –≤ –õ–°.")
                except Exception: pass
                kicked = await kick_and_notify(
                    bot=bot, user_id=user_id, chat_id=chat_id,
                    first_name=user_first_name, reason=kick_reason_pm
                )
                if kicked:
                     await db.set_user_selection_status(user_id, 'inactive_kick')
                     if initial_message:
                        kick_message_text = (
                            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {hd.link(hd.quote(user_first_name), f'tg://user?id={user_id}')} –±—ã–ª —É–¥–∞–ª–µ–Ω.\n"
                            f"–ü—Ä–∏—á–∏–Ω–∞: {hd.quote(kick_reason_pm)}."
                        )
                        await safe_edit_message_text(
                            bot, kick_message_text, chat_id, initial_message.message_id,
                            reply_markup=None, log_prefix=f"KickInactiveEdit/{user_id}"
                        )
            else:
                logging.info(f"–ö–∏–∫ –¥–ª—è user_id {user_id} –æ—Ç–º–µ–Ω–µ–Ω, —Å—Ç–∞—Ç—É—Å: '{status}', –Ω–∞—á–∞–ª –õ–°: {started_pm}.")
        except asyncio.CancelledError:
            logging.info(f"–ó–∞–¥–∞—á–∞ –Ω–∞ –∫–∏–∫ –¥–ª—è user_id {user_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –≤ –∫–æ—Ä—É—Ç–∏–Ω–µ –∫–∏–∫–∞ –¥–ª—è user_id {user_id}: {e}")
        finally:
            if user_id in kick_tasks: del kick_tasks[user_id]
    task = asyncio.create_task(kick_coro())
    kick_tasks[user_id] = task
    logging.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∫–∏–∫ user_id {user_id} —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥. –ü—Ä–∏—á–∏–Ω–∞: {reason}")

def cancel_kick_task(user_id: int):
    if user_id in kick_tasks and not kick_tasks[user_id].done():
        kick_tasks[user_id].cancel()
        return True
    return False

async def delete_message_after(bot: Bot, chat_id: int, message_id: int, delay: int):
     await asyncio.sleep(delay)
     await safe_delete_message(bot, chat_id, message_id, log_prefix=f"DelayedDelete/{message_id}")